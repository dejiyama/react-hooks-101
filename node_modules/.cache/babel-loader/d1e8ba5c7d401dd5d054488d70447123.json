{"ast":null,"code":"var _jsxFileName = \"/Users/dejimayamato/react-hooks-101/src/components/App.js\";\nimport React, { useReducer, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport reducer from '../reducers';\nimport Events from '../components/Events.js';\nimport EventForm from '../components/EventForm.js';\nimport OperationLogs from './OperationLogs.js';\nimport AppContext from '../contexts/AppContext';\n\nconst App = () => {\n  const appState = localStorage.getItem('appWithRedux');\n  const initialState = appState ? JSON.parse(appState) : {\n    events: [],\n    operationLogs: []\n  };\n  const [state, dispatch] = useReducer(reducer, initialState); //useEffectの第二引数にstateを記述することで、stateの値が変化したら呼ばれる。\n\n  useEffect(() => {\n    //ローカルストレージに保存するには、文字列化する必要がある。\n    localStorage.setItem('appWithRedux', JSON.stringify(state));\n  }, [state]);\n  return /*#__PURE__*/React.createElement(AppContext.Provider, {\n    value: {\n      state,\n      dispatch\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container-fluid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(EventForm, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Events, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(OperationLogs, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/dejimayamato/react-hooks-101/src/components/App.js"],"names":["React","useReducer","useEffect","reducer","Events","EventForm","OperationLogs","AppContext","App","appState","localStorage","getItem","initialState","JSON","parse","events","operationLogs","state","dispatch","setItem","stringify"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,QAA6C,OAA7C;AACA,OAAO,sCAAP;AAEA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,OAAOC,UAAP,MAAuB,wBAAvB;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAChB,QAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAjB;AACA,QAAMC,YAAY,GAAGH,QAAQ,GAAGI,IAAI,CAACC,KAAL,CAAWL,QAAX,CAAH,GAA0B;AACrDM,IAAAA,MAAM,EAAE,EAD6C;AAErDC,IAAAA,aAAa,EAAE;AAFsC,GAAvD;AAIA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBjB,UAAU,CAACE,OAAD,EAAUS,YAAV,CAApC,CANgB,CAOhB;;AACAV,EAAAA,SAAS,CAAC,MAAK;AACb;AACAQ,IAAAA,YAAY,CAACS,OAAb,CAAqB,cAArB,EAAqCN,IAAI,CAACO,SAAL,CAAeH,KAAf,CAArC;AACD,GAHQ,EAGP,CAACA,KAAD,CAHO,CAAT;AAKA,sBACE,oBAAC,UAAD,CAAY,QAAZ;AAAqB,IAAA,KAAK,EAAE;AAAEA,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,eAIE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CADF,CADF;AAUD,CAvBD;;AAyBA,eAAeV,GAAf","sourcesContent":["import React, { useReducer, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport reducer from '../reducers';\nimport Events from '../components/Events.js';\nimport EventForm from '../components/EventForm.js'\nimport OperationLogs from './OperationLogs.js'\nimport AppContext from '../contexts/AppContext'\n\nconst App = () => {\n  const appState = localStorage.getItem('appWithRedux')\n  const initialState = appState ? JSON.parse(appState) : {\n    events: [],\n    operationLogs: []\n  }\n  const [state, dispatch] = useReducer(reducer, initialState)\n  //useEffectの第二引数にstateを記述することで、stateの値が変化したら呼ばれる。\n  useEffect(() =>{\n    //ローカルストレージに保存するには、文字列化する必要がある。\n    localStorage.setItem('appWithRedux', JSON.stringify(state))\n  },[state])\n\n  return (\n    <AppContext.Provider value={{ state, dispatch }}>\n      <div className=\"container-fluid\">\n        {/* EventFormにstateとdispatchを渡す。 */}\n        <EventForm />\n        <Events />\n        <OperationLogs/>\n      </div>\n    </AppContext.Provider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}